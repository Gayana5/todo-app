// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	todo "github.com/Gayana5/todo-app"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user todo.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateCode mocks base method.
func (m *MockAuthorization) GenerateCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateCode indicates an expected call of GenerateCode.
func (mr *MockAuthorizationMockRecorder) GenerateCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCode", reflect.TypeOf((*MockAuthorization)(nil).GenerateCode))
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// GetInfo mocks base method.
func (m *MockAuthorization) GetInfo(id int) (todo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", id)
	ret0, _ := ret[0].(todo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockAuthorizationMockRecorder) GetInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockAuthorization)(nil).GetInfo), id)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// ResetPassword mocks base method.
func (m *MockAuthorization) ResetPassword(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockAuthorizationMockRecorder) ResetPassword(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockAuthorization)(nil).ResetPassword), email, password)
}

// SendCodeToEmail mocks base method.
func (m *MockAuthorization) SendCodeToEmail(to, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCodeToEmail", to, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCodeToEmail indicates an expected call of SendCodeToEmail.
func (mr *MockAuthorizationMockRecorder) SendCodeToEmail(to, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCodeToEmail", reflect.TypeOf((*MockAuthorization)(nil).SendCodeToEmail), to, code)
}

// UpdateInfo mocks base method.
func (m *MockAuthorization) UpdateInfo(userId int, input todo.UpdateUserInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfo", userId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfo indicates an expected call of UpdateInfo.
func (mr *MockAuthorizationMockRecorder) UpdateInfo(userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfo", reflect.TypeOf((*MockAuthorization)(nil).UpdateInfo), userId, input)
}

// UserExists mocks base method.
func (m *MockAuthorization) UserExists(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockAuthorizationMockRecorder) UserExists(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockAuthorization)(nil).UserExists), email)
}

// MockTodoGoal is a mock of TodoGoal interface.
type MockTodoGoal struct {
	ctrl     *gomock.Controller
	recorder *MockTodoGoalMockRecorder
}

// MockTodoGoalMockRecorder is the mock recorder for MockTodoGoal.
type MockTodoGoalMockRecorder struct {
	mock *MockTodoGoal
}

// NewMockTodoGoal creates a new mock instance.
func NewMockTodoGoal(ctrl *gomock.Controller) *MockTodoGoal {
	mock := &MockTodoGoal{ctrl: ctrl}
	mock.recorder = &MockTodoGoalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoGoal) EXPECT() *MockTodoGoalMockRecorder {
	return m.recorder
}

// AskAI mocks base method.
func (m *MockTodoGoal) AskAI(userId, goalId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskAI", userId, goalId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskAI indicates an expected call of AskAI.
func (mr *MockTodoGoalMockRecorder) AskAI(userId, goalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskAI", reflect.TypeOf((*MockTodoGoal)(nil).AskAI), userId, goalId)
}

// Create mocks base method.
func (m *MockTodoGoal) Create(userId int, goal todo.TodoGoal) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, goal)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoGoalMockRecorder) Create(userId, goal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoGoal)(nil).Create), userId, goal)
}

// Delete mocks base method.
func (m *MockTodoGoal) Delete(userId, goalId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, goalId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoGoalMockRecorder) Delete(userId, goalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoGoal)(nil).Delete), userId, goalId)
}

// GetAll mocks base method.
func (m *MockTodoGoal) GetAll(userId int) ([]todo.TodoGoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]todo.TodoGoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoGoalMockRecorder) GetAll(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoGoal)(nil).GetAll), userId)
}

// GetById mocks base method.
func (m *MockTodoGoal) GetById(userId, goalId int) (todo.TodoGoal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, goalId)
	ret0, _ := ret[0].(todo.TodoGoal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTodoGoalMockRecorder) GetById(userId, goalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTodoGoal)(nil).GetById), userId, goalId)
}

// Update mocks base method.
func (m *MockTodoGoal) Update(userId, goalId int, input todo.UpdateGoalInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, goalId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoGoalMockRecorder) Update(userId, goalId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoGoal)(nil).Update), userId, goalId, input)
}

// MockTodoTask is a mock of TodoTask interface.
type MockTodoTask struct {
	ctrl     *gomock.Controller
	recorder *MockTodoTaskMockRecorder
}

// MockTodoTaskMockRecorder is the mock recorder for MockTodoTask.
type MockTodoTaskMockRecorder struct {
	mock *MockTodoTask
}

// NewMockTodoTask creates a new mock instance.
func NewMockTodoTask(ctrl *gomock.Controller) *MockTodoTask {
	mock := &MockTodoTask{ctrl: ctrl}
	mock.recorder = &MockTodoTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoTask) EXPECT() *MockTodoTaskMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoTask) Create(userId, goalId int, task todo.TodoTask) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, goalId, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoTaskMockRecorder) Create(userId, goalId, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoTask)(nil).Create), userId, goalId, task)
}

// Delete mocks base method.
func (m *MockTodoTask) Delete(userId, taskId, goalId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, taskId, goalId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoTaskMockRecorder) Delete(userId, taskId, goalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoTask)(nil).Delete), userId, taskId, goalId)
}

// GetAll mocks base method.
func (m *MockTodoTask) GetAll(userId, goalId int) ([]todo.TodoTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, goalId)
	ret0, _ := ret[0].([]todo.TodoTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoTaskMockRecorder) GetAll(userId, goalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoTask)(nil).GetAll), userId, goalId)
}

// GetById mocks base method.
func (m *MockTodoTask) GetById(userId, taskId, goalId int) (todo.TodoTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, taskId, goalId)
	ret0, _ := ret[0].(todo.TodoTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTodoTaskMockRecorder) GetById(userId, taskId, goalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTodoTask)(nil).GetById), userId, taskId, goalId)
}

// Update mocks base method.
func (m *MockTodoTask) Update(userId, taskId, goalId int, input todo.UpdateTaskInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, taskId, goalId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoTaskMockRecorder) Update(userId, taskId, goalId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoTask)(nil).Update), userId, taskId, goalId, input)
}
